/*
 * Copyright (c) 2009 - 2023 Red Hat, Inc.
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */
package org.candlepin.resource.util;

import org.candlepin.model.AsyncJobStatus.JobState;

import java.util.HashSet;
import java.util.Set;



/**
 * The JobStateMapper is responsible for mapping internal job states (AsyncJobStatus.JobState) to
 * external job states (ExternalJobState) and vice versa.
 * <p></p>
 * Internal job states are mapped to external job states following a many-to-one relationship. As a
 * consequence of this, translating an internal job state will always result in a single external
 * job state; but translating an external job state may result in many internal job states.
 */
public class JobStateMapper {

    // TODO: This enum should be generated by OpenAPI
    public static enum ExternalJobState {
        CREATED,
        RUNNING,
        FINISHED,
        FAILED,
        CANCELED,
    }

    private JobStateMapper() {
        // Disallow instantiation
    }

    /**
     * Translates the given internal job state to an external job state. If the provided internal
     * job state is null, this function returns null.
     *
     * @param state
     *  the internal job state to translate
     *
     * @return
     *  an external job state representing the provided internal job state
     */
    public static ExternalJobState translateState(JobState state) {
        if (state == null) {
            return null;
        }

        switch (state) {
            case CREATED:
            case WAITING:
            case SCHEDULED:
            case QUEUED:
                return ExternalJobState.CREATED;

            case RUNNING:
            case FAILED_WITH_RETRY:
                return ExternalJobState.RUNNING;

            case FINISHED:
                return ExternalJobState.FINISHED;

            case FAILED:
            case ABORTED:
                return ExternalJobState.FAILED;

            case CANCELED:
                return ExternalJobState.CANCELED;

            default:
                throw new IllegalArgumentException("Unsupported job state: " + state.name());
        }
    }

    /**
     * Translates the given external job state and adds the mapped internal states.
     *
     * @param translated
     *  a set to receive the internal job states to which the external job states maps
     *
     * @param state
     *  the external job state to translate
     */
    private static void translateStateImpl(Set<JobState> translated, ExternalJobState state) {
        if (state != null) {
            switch (state) {
                case CREATED:
                    translated.add(JobState.CREATED);
                    translated.add(JobState.QUEUED);
                    translated.add(JobState.WAITING);
                    translated.add(JobState.SCHEDULED);
                    break;

                case RUNNING:
                    translated.add(JobState.RUNNING);
                    translated.add(JobState.FAILED_WITH_RETRY);
                    break;

                case FINISHED:
                    translated.add(JobState.FINISHED);
                    break;

                case FAILED:
                    translated.add(JobState.FAILED);
                    translated.add(JobState.ABORTED);
                    break;

                case CANCELED:
                    translated.add(JobState.CANCELED);
                    break;

                default:
                    throw new IllegalArgumentException("Unsupported job state: " + state.name());
            }
        }
    }

    /**
     * Translates the given external job state into a set of internal job states which map to it. If
     * the provided external job state is null, this function returns null.
     *
     * @param state
     *  the external job state to translate
     *
     * @return
     *  a set of internal job states which map to the provided external state
     */
    public static Set<JobState> translateState(ExternalJobState state) {
        if (state == null) {
            return null;
        }

        Set<JobState> translated = new HashSet<>();
        translateStateImpl(translated, state);

        return translated;
    }

    /**
     * Translates the given external job states into a set of internal job states. If the provided
     * collection of states is null, this function returns null. If the provided collection is
     * empty, this function returns an empty collection.
     *
     * @param states
     *  an iterable collection of external job states to translate
     *
     * @return
     *  a set of internal job states which map to the provided external states
     */
    public static Set<JobState> translateStates(Iterable<ExternalJobState> states) {
        if (states == null) {
            return null;
        }

        Set<JobState> translated = new HashSet<>();
        for (ExternalJobState state : states) {
            translateStateImpl(translated, state);
        }

        return translated;
    }

}
