<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">


    <property dbms="postgresql" name="tmp_table_creation_args" value="TEMPORARY"/>

    <property dbms="postgresql" name="revoked_value" value="true"/>

    <changeSet id="20170718095058-1" author="vrjain, crog">
      <validCheckSum>7:5494d3a96b8e4205ce7993d2c2b96e29</validCheckSum>
      <validCheckSum>7:65a81a9ed61eca97c087f8518499e247</validCheckSum>
      <validCheckSum>7:8850f008ea669aded02fe31c9538c134</validCheckSum>
      <validCheckSum>8:01fffed045e8c0124bace18aa8ce5ac6</validCheckSum>
      <validCheckSum>8:0d79b60dc1f5a189bdff9c7ffb381388</validCheckSum>
      <validCheckSum>8:f5a809c22012bfccf3849f3c5a5744c8</validCheckSum>

      <comment>
        Purge orphaned pools

        This changeset purges orphaned pools that fall into the following categories:
          - Stack derived pools with no source stacks
          - Bonus pools with no source subscription
          - Stack derived pools for stacks that no longer have any entitlements

        For each identified pools, the following cleanup operations are performed:
          - Mark serials of certificates as revoked for entitlements of orphaned pools
          - Delete entitlement certificates for entitlements of orphaned pools
          - Delete entitlements of orphaned pools
          - Delete source sub entries for orphaned pools
          - Delete provided and derived provided products of orphaned pools
          - Delete orphaned pools

        Note that the follow set of queries is slightly different for MySQL/MariaDB due to its limitations
        with temporary tables and deletions.
      </comment>

      <sql dbms="mysql,mariadb">
        DROP TABLE IF EXISTS tmp_orphaned_pools;
        CREATE TABLE IF NOT EXISTS tmp_orphaned_pools (pool_id varchar(32) PRIMARY KEY);

        -- Find our orphaned pools
        -- 1. Delete stack derived pools with no source stacks
        INSERT IGNORE INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM cp_pool p LEFT JOIN cp_pool_source_stack ss ON p.id = ss.derivedpool_id
            WHERE p.type = 'STACK_DERIVED' AND ss.derivedpool_id IS NULL;

        -- 2. Delete bonus pools with no source subscription
        INSERT IGNORE INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM cp_pool p LEFT JOIN cp2_pool_source_sub ss ON p.id = ss.pool_id
            WHERE p.type = 'BONUS' AND ss.pool_id IS NULL;

        -- 3. Delete stack derived pools for stacking IDs that no longer have any entitlements
        INSERT IGNORE INTO tmp_orphaned_pools (pool_id)
          SELECT ss.derivedpool_id
            FROM cp_entitlement e JOIN cp_pool p ON p.id = e.pool_id JOIN cp2_product_attributes a ON a.product_uuid = p.product_uuid AND a.name = 'stacking_id'
            RIGHT JOIN cp_pool_source_stack ss ON ss.sourceconsumer_id = e.consumer_id AND ss.sourcestackid = a.value
            WHERE e.id IS NULL;

        -- Note that the following query only checks one level deep and will not catch nested source entitlement issues.
        -- A recursive stored procedure would be a better option here.
        INSERT IGNORE INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM tmp_orphaned_pools op JOIN cp_entitlement e ON e.pool_id = op.pool_id JOIN cp_pool p ON p.sourceentitlement_id = e.id;

        -- Perform actual cleanup of the orphaned pools found
        -- 0. Mark serials for entitlement certificates as revoked
          UPDATE cp_cert_serial cs SET revoked = true WHERE EXISTS
            (SELECT 1 FROM cp_ent_certificate ec JOIN cp_entitlement e ON e.id = ec.entitlement_id JOIN tmp_orphaned_pools op ON op.pool_id = e.pool_id WHERE ec.serial_id = cs.id);

        -- 1. Delete entitlement certificates for entitlements of orphaned pools
          DELETE FROM ec USING cp_ent_certificate ec JOIN cp_entitlement e ON e.id = ec.entitlement_id JOIN tmp_orphaned_pools op ON op.pool_id = e.pool_id;

        -- 2. Delete entitlements of orphaned pools
          DELETE FROM e USING cp_entitlement e JOIN tmp_orphaned_pools op ON e.pool_id = op.pool_id;

        -- 3. Delete source sub entries for orphaned pools
          DELETE FROM ss USING cp2_pool_source_sub ss JOIN tmp_orphaned_pools op ON op.pool_id = ss.pool_id;

        -- 4. Delete provided and derived provided products of orphaned pools
          DELETE FROM pp USING cp2_pool_provided_products pp JOIN tmp_orphaned_pools op ON op.pool_id = pp.pool_id;
          DELETE FROM dp USING cp2_pool_derprov_products dp JOIN tmp_orphaned_pools op ON op.pool_id = dp.pool_id;

        -- 5. Delete orphaned pools
          DELETE FROM p USING cp_pool p JOIN tmp_orphaned_pools op ON op.pool_id = p.id;

        DROP TABLE IF EXISTS tmp_orphaned_pools;
      </sql>

      <sql dbms="postgresql">
        CREATE ${tmp_table_creation_args} TABLE tmp_orphaned_pools (pool_id varchar(32) PRIMARY KEY);

        -- Find our orphaned pools
        -- 1. Delete stack derived pools with no source stacks
        INSERT INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM cp_pool p LEFT JOIN cp_pool_source_stack ss ON p.id = ss.derivedpool_id
            WHERE p.type = 'STACK_DERIVED' AND ss.derivedpool_id IS NULL AND NOT EXISTS (SELECT pool_id FROM tmp_orphaned_pools WHERE pool_id = p.id);

        -- 2. Delete bonus pools with no source subscription
        INSERT INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM cp_pool p LEFT JOIN cp2_pool_source_sub ss ON p.id = ss.pool_id
            WHERE p.type = 'BONUS' AND ss.pool_id IS NULL AND NOT EXISTS (SELECT pool_id FROM tmp_orphaned_pools WHERE pool_id = p.id);

        -- 3. Delete stack derived pools for stacking IDs that no longer have any entitlements
        INSERT INTO tmp_orphaned_pools (pool_id)
          SELECT ss.derivedpool_id
            FROM cp_entitlement e JOIN cp_pool p ON p.id = e.pool_id JOIN cp2_product_attributes a ON a.product_uuid = p.product_uuid AND a.name = 'stacking_id'
            RIGHT JOIN cp_pool_source_stack ss ON ss.sourceconsumer_id = e.consumer_id AND ss.sourcestackid = a.value
            WHERE e.id IS NULL AND NOT EXISTS (SELECT pool_id FROM tmp_orphaned_pools WHERE pool_id = ss.derivedpool_id);

        -- Note that the following query only checks one level deep and will not catch nested source entitlement issues.
        -- A recursive stored procedure would be a better option here.
        INSERT INTO tmp_orphaned_pools (pool_id)
          SELECT p.id FROM tmp_orphaned_pools op JOIN cp_entitlement e ON e.pool_id = op.pool_id JOIN cp_pool p ON p.sourceentitlement_id = e.id
            WHERE NOT EXISTS (SELECT pool_id FROM tmp_orphaned_pools WHERE pool_id = p.id);


        -- Perform actual cleanup of the orphaned pools found
        -- 0. Mark serials for entitlement certificates as revoked
          UPDATE cp_cert_serial cs SET revoked = ${revoked_value} WHERE EXISTS
            (SELECT 1 FROM cp_ent_certificate ec JOIN cp_entitlement e ON e.id = ec.entitlement_id JOIN tmp_orphaned_pools op ON op.pool_id = e.pool_id WHERE ec.serial_id = cs.id);

        -- 1. Delete entitlement certificates for entitlements of orphaned pools
          DELETE FROM cp_ent_certificate ec WHERE EXISTS (SELECT 1 FROM cp_entitlement e JOIN tmp_orphaned_pools op ON e.pool_id = op.pool_id WHERE e.id = ec.entitlement_id);

        -- 2. Delete entitlements of orphaned pools
          DELETE FROM cp_entitlement e WHERE EXISTS (SELECT 1 FROM tmp_orphaned_pools WHERE pool_id = e.pool_id);

        -- 3. Delete source sub entries for orphaned pools
          DELETE FROM cp2_pool_source_sub ss WHERE EXISTS (SELECT 1 FROM tmp_orphaned_pools WHERE pool_id = ss.pool_id);

        -- 4. Delete provided and derived provided products of orphaned pools
          DELETE FROM cp2_pool_provided_products ppp WHERE EXISTS (SELECT 1 FROM tmp_orphaned_pools WHERE pool_id = ppp.pool_id);
          DELETE FROM cp2_pool_derprov_products pdpp WHERE EXISTS (SELECT 1 FROM tmp_orphaned_pools WHERE pool_id = pdpp.pool_id);

        -- 5. Delete orphaned pools
          DELETE FROM cp_pool p WHERE EXISTS (SELECT pool_id FROM tmp_orphaned_pools WHERE pool_id = p.id);

        DROP TABLE tmp_orphaned_pools;
      </sql>
    </changeSet>

</databaseChangeLog>
<!-- vim: set expandtab sts=4 sw=4 ai: -->
